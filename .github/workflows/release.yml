name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (do not publish)'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  validate:
    name: Validate release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Validate version format
      id: validate
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "Error: Invalid version format. Use semantic versioning (e.g., 1.0.0, 1.0.0-alpha.1)"
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Check if version already exists
      run: |
        if git tag --list | grep -q "^v${{ steps.validate.outputs.version }}$"; then
          echo "Error: Version v${{ steps.validate.outputs.version }} already exists"
          exit 1
        fi

    - name: Update Cargo.toml version
      run: |
        sed -i 's/^version = .*/version = "${{ steps.validate.outputs.version }}"/' Cargo.toml
        git diff Cargo.toml

    - name: Check that project builds
      run: |
        cargo check --all-features
        cargo test --all-features

  create-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ !github.event.inputs.dry_run }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Update version in Cargo.toml
      run: |
        sed -i 's/^version = .*/version = "${{ needs.validate.outputs.version }}"/' Cargo.toml

    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)" HEAD)
        fi

        # Create changelog
        cat > CHANGELOG.md << EOF
        ## What's Changed

        $COMMITS

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v${{ needs.validate.outputs.version }}
        EOF

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate.outputs.version }}
        release_name: Release v${{ needs.validate.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(needs.validate.outputs.version, 'alpha') || contains(needs.validate.outputs.version, 'beta') || contains(needs.validate.outputs.version, 'rc') }}

  publish-crates-io:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: ${{ !github.event.inputs.dry_run }}
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Update version in Cargo.toml
      run: |
        sed -i 's/^version = .*/version = "${{ needs.validate.outputs.version }}"/' Cargo.toml

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Cargo.toml Cargo.lock
        git commit -m "chore: bump version to ${{ needs.validate.outputs.version }}" || exit 0
        git push origin HEAD:${{ github.ref_name }}

  dry-run:
    name: Dry run
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ github.event.inputs.dry_run }}
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Update version in Cargo.toml
      run: |
        sed -i 's/^version = .*/version = "${{ needs.validate.outputs.version }}"/' Cargo.toml

    - name: Dry run publish
      run: |
        echo "ðŸš€ Would create release v${{ needs.validate.outputs.version }}"
        echo "ðŸ“¦ Would publish to crates.io with version ${{ needs.validate.outputs.version }}"
        cargo publish --dry-run
        echo "âœ… Dry run completed successfully"